[include stealthburner_leds.cfg]

#####################################################################
#   START_PRINT
#####################################################################

[gcode_macro START_PRINT]
description: Start printing with a home and wipe
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.35
    {% set T_BED = params.T_BED|default(60)|float %}
    {% set T_EXT = params.T_EXTRUDER|default(210)|float %}
    # Start heating
    M117 Heating...                 ; display message
    STATUS_HEATING
    M140 S{T_BED}
    M104 S{T_EXT}
    # Wait for reaching temperature
    M109 S{T_EXT}
    M190 S{T_BED}
    M117 Homing...                 ; display message
    STATUS_HOMING
    G28
    STATUS_LEVELING
    M117 Tilting...                 ; display message
    Z_TILT_ADJUST
    #G28
    G92 E0 # Reset Extruder
    #G0 X175 Y175 Z30 F3600
    BED_MESH_PROFILE LOAD=default
    STATUS_PRINTING
    #BED_MESH_PROFILE REMOVE=default
    #BED_MESH_CALIBRATE PROFILE=default METHOD=automatic ADAPTIVE=1 ADAPTIVE_MARGIN=5
        M117 Priming...                 ; display message
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed 
    G1 X0.1 Y20 Z0.2 F5000.0 # Move to start position
    G1 X0.1 Y200.0 Z0.2 F1000.0 E15 # Draw the first line
    G1 X0.4 Y200.0 Z0.2 F5000.0 # Move to side a little
    G1 X0.4 Y20 Z0.2 F1000.0 E30 # Draw the second line
    G92 E0 # Reset Extruder
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z2.0 F5000.0 # Move over to prevent blob squish
    M117 Printing...                 ; display message
   
#####################################################################
[gcode_macro FILAMENT_CHANGE]
description: Heat up the nozzle until cold pull temp and remove filament
gcode:
    M104 S{80}
    M109 S{80}
    G92 E0 # Reset Extruder
    G1 E-70.0 F600                 ; retract filament
    G92 E0 # Reset Extruder
    TURN_OFF_HEATERS
  
#####################################################################
#   PRINT_END
#####################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    M84 #Disable all steppers
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M117 Finished                 ; display message
    G4 S120
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

#####################################################################
#   GO_CENTER
#####################################################################

[gcode_macro GO_CENTER]
gcode:
    G90
    G1 Z15
    G1 X175 Y175 F5000

[gcode_macro GO_BELT_ADJUST]
gcode:
    G90
    G1 Z80
    G1 X175 Y110 F5000
    
#####################################################################
#   TEST_SPEED
#####################################################################

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    

#####################################################################
#   FILAMENT_RUNOUT
#####################################################################

[respond] # Need this to send console messages
[filament_switch_sensor extruder_runout_sensor]
runout_gcode:
pause_on_runout: FALSE
runout_gcode: F_CONSUMED #start measuring the length of the remaining filament to not waste so much
event_delay: 2.0
switch_pin: !PG11

[gcode_macro F_CONSUMED]
variable_filament_consumed: 0
variable_filament_lenght: 930 #900   # length between the sensor and extruder
gcode:
  SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used} # save current filament consumption
  UPDATE_DELAYED_GCODE ID=DELAY__filament_runout DURATION=1 # start checking filament consumption

[delayed_gcode DELAY__filament_runout]
gcode:
  # use set for easier reading
  {% set consumed=printer["gcode_macro F_CONSUMED"].filament_consumed %}
  {% set length=printer["gcode_macro F_CONSUMED"].filament_lenght %}
  # check if predetermine length is reached
  {% if printer.print_stats.filament_used|float <= (consumed|float + length|float) %}     # If currently used up filament is less than previously recorded usage + your specified length then measure again
    UPDATE_DELAYED_GCODE ID=DELAY__filament_runout DURATION=1
  {% else %} # if the current measurement larger than call/trigger runout event
    _filament_runout
  {% endif %}

[gcode_macro _filament_runout]
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=10800 # Set idle_timeout to 3hrs
    EXTR_SAVE #save the extruder temperature before turning off
    FAN_SAVE #save the part cooling fan speed before turning off
    PAUSE_BASE #SAVE_GCODE_STATE is not required as PAUSE does this automatically. See here: https://www.klipper3d.org/G-Codes.html#pause
    G91 # Relative positioning
    G1 E-30 F2100 # Retract 30mm of filament
    G1 Z10 # Move Z up 10mm from current position
    G90 # Absolute positioning
    G1 X175 Y10 F6000 # Park at the coordinates you said you wanted
    M106 S0 # Disable the part cooling fan
#    UPDATE_DELAYED_GCODE ID=runout_wait DURATION=300

#[delayed_gcode runout_wait]
#gcode:
#    # Honestly you probably shouldn't keep the hotend heated for 5 minutes as it's
#    # definitely going to leak a bunch of filament during that time, but anyway
#    M104 S0 # turn off the hotend

[gcode_macro HEAT_AND_RESUME]
description: Heat the extruder and resume print when target is reached
gcode:
    EXTR_RESUME # start heating the hotend to last recorded temp. Waiting for temp reached.
    RESPOND TYPE=error MSG="Temperature reached. Resuming print."
    FAN_RESUME # turn on the fan to last recorded speed
    # Resume print when target is reached
    # This will automatically restore to the pre-PAUSE position
    # See here: https://www.klipper3d.org/G-Codes.html#resume
    RESUME
    M104 S{printer["gcode_macro EXTR_SAVE"].extr_temp}
    M106 S{printer["gcode_macro FAN_SAVE"].fan_speed * 255} # fan_speed stored in percentage (56% = 0.56) but gcode accepting 0-255 int values.

[gcode_macro EXTR_SAVE]
variable_extr_temp: 0
gcode:
  # Save target temperature to extr_temp variable
  SET_GCODE_VARIABLE MACRO=EXTR_SAVE VARIABLE=extr_temp VALUE={printer.extruder.temperature}

[gcode_macro EXTR_RESUME]
gcode:
  # Restore temperature
  M109 S{printer["gcode_macro EXTR_SAVE"].extr_temp}
  M104 S{printer["gcode_macro EXTR_SAVE"].extr_temp}

[gcode_macro FAN_SAVE]
variable_fan_speed: 0
gcode:
  # Save current speed to fan_speed variable
  SET_GCODE_VARIABLE MACRO=FAN_SAVE VARIABLE=fan_speed VALUE={printer.fan.speed}

[gcode_macro FAN_RESUME]
gcode:
  # Restore fan speed
  M106 S{printer["gcode_macro FAN_SAVE"].fan_speed * 255} # fan_speed stored in percentage (56% = 0.56) but gcode accepting 0-255 int values.

[gcode_macro TRIGGER_TEST]
description: testing endstops and probe by activating leds
gcode:
    STATUS_TRIGGERTEST
